{
    "$schema": "http://vega.github.io/schema/vega/v3.0.json",
    "description": "Anscombe's Quartet",
    "autosize": "pad",
    "padding": 5,
    "data": [
        {
            "name": "brush_store"
        },
        {
            "name": "grid_store"
        },
        {
            "name": "xenc_store"
        },
        {
            "name": "source_0",
            "url": "data/anscombe.json",
            "format": {
                "type": "json",
                "parse": {
                    "X": "number",
                    "Y": "number"
                }
            },
            "transform": [
                {
                    "type": "filter",
                    "expr": "datum[\"X\"] !== null && !isNaN(datum[\"X\"]) && datum[\"Y\"] !== null && !isNaN(datum[\"Y\"])"
                }
            ]
        },
        {
            "name": "column",
            "source": "source_0",
            "transform": [
                {
                    "type": "aggregate",
                    "groupby": [
                        "Series"
                    ]
                }
            ]
        },
        {
            "name": "column_layout",
            "source": "column",
            "transform": [
                {
                    "type": "aggregate",
                    "ops": [
                        "distinct"
                    ],
                    "fields": [
                        "Series"
                    ]
                }
            ]
        }
    ],
    "signals": [
        {
            "name": "child_width",
            "update": "200"
        },
        {
            "name": "child_height",
            "update": "200"
        },
        {
            "name": "unit",
            "value": {},
            "on": [
                {
                    "events": "mousemove",
                    "update": "group()._id ? group() : unit"
                }
            ]
        },
        {
            "name": "xenc_X",
            "value": "",
            "on": [
                {
                    "events": [
                        {
                            "source": "scope",
                            "type": "mouseover"
                        }
                    ],
                    "update": "(item().isVoronoi ? datum.datum : datum)[\"X\"]"
                }
            ],
            "bind": {
                "input": "number"
            }
        },
        {
            "name": "grid_X"
        },
        {
            "name": "grid_Y"
        },
        {
            "name": "xenc",
            "update": "data(\"xenc_store\")[0]"
        }
    ],
    "marks": [
        {
            "name": "nested_main_group",
            "type": "group",
            "layout": {
                "padding": {
                    "row": 10,
                    "column": 10
                },
                "offset": 10,
                "columns": {
                    "signal": "data('column_layout')[0][\"distinct_Series\"]"
                },
                "bounds": "full"
            },
            "marks": [
                {
                    "name": "column_title",
                    "role": "column-title",
                    "type": "group",
                    "marks": [
                        {
                            "type": "text",
                            "role": "column-title-text",
                            "encode": {
                                "update": {
                                    "x": {
                                        "signal": "0.5 * width"
                                    },
                                    "align": {
                                        "value": "center"
                                    },
                                    "text": {
                                        "value": "Series"
                                    },
                                    "fill": {
                                        "value": "black"
                                    },
                                    "fontWeight": {
                                        "value": "bold"
                                    }
                                }
                            }
                        }
                    ]
                },
                {
                    "name": "row_header",
                    "type": "group",
                    "role": "row-header",
                    "encode": {
                        "update": {
                            "height": {
                                "signal": "child_height"
                            }
                        }
                    },
                    "axes": [
                        {
                            "scale": "y",
                            "format": "s",
                            "orient": "left",
                            "title": "Y",
                            "zindex": 1
                        }
                    ]
                },
                {
                    "name": "column_header",
                    "type": "group",
                    "role": "column-header",
                    "from": {
                        "data": "column"
                    },
                    "title": {
                        "text": {
                            "signal": "parent[\"Series\"]"
                        },
                        "offset": 10,
                        "orient": "top",
                        "encode": {
                            "update": {
                                "fontWeight": {
                                    "value": "normal"
                                },
                                "angle": {
                                    "value": 0
                                },
                                "fontSize": {
                                    "value": 10
                                }
                            }
                        }
                    },
                    "encode": {
                        "update": {
                            "width": {
                                "signal": "child_width"
                            }
                        }
                    }
                },
                {
                    "name": "column_footer",
                    "type": "group",
                    "role": "column-footer",
                    "from": {
                        "data": "column"
                    },
                    "encode": {
                        "update": {
                            "width": {
                                "signal": "child_width"
                            }
                        }
                    },
                    "axes": [
                        {
                            "scale": "x",
                            "format": "s",
                            "orient": "bottom",
                            "tickCount": 5,
                            "title": "X",
                            "zindex": 1
                        }
                    ]
                },
                {
                    "name": "cell",
                    "type": "group",
                    "from": {
                        "facet": {
                            "name": "facet",
                            "data": "source_0",
                            "groupby": [
                                "Series"
                            ]
                        }
                    },
                    "encode": {
                        "update": {
                            "width": {
                                "signal": "child_width"
                            },
                            "height": {
                                "signal": "child_height"
                            },
                            "stroke": {
                                "value": "#ccc"
                            },
                            "strokeWidth": {
                                "value": 1
                            },
                            "fill": {
                                "value": "transparent"
                            }
                        }
                    },
                    "signals": [
                        {
                            "name": "brush_X",
                            "value": [],
                            "on": [
                                {
                                    "events": {
                                        "source": "scope",
                                        "type": "mousedown",
                                        "filter": [
                                            "event.shiftKey",
                                            "!event.item || (event.item && event.item.mark.name !== \"brush_brush\")",
                                            "!event.item || (event.item && event.item.mark.name !== \"brush_brush\")"
                                        ]
                                    },
                                    "update": "invert(\"x\", [x(unit), x(unit)])"
                                },
                                {
                                    "events": {
                                        "source": "scope",
                                        "type": "mousemove",
                                        "between": [
                                            {
                                                "source": "scope",
                                                "type": "mousedown",
                                                "filter": [
                                                    "event.shiftKey",
                                                    "!event.item || (event.item && event.item.mark.name !== \"brush_brush\")",
                                                    "!event.item || (event.item && event.item.mark.name !== \"brush_brush\")"
                                                ]
                                            },
                                            {
                                                "source": "scope",
                                                "type": "mouseup"
                                            }
                                        ]
                                    },
                                    "update": "[brush_X[0], invert(\"x\", clamp(x(unit), 0, child_width))]"
                                },
                                {
                                    "events": {
                                        "signal": "brush_translate_delta"
                                    },
                                    "update": "clampRange([brush_translate_anchor.extent_x[0] + abs(span(brush_translate_anchor.extent_x)) * brush_translate_delta.x / brush_translate_anchor.width, brush_translate_anchor.extent_x[1] + abs(span(brush_translate_anchor.extent_x)) * brush_translate_delta.x / brush_translate_anchor.width], invert(\"x\", 0), invert(\"x\", unit.width))"
                                },
                                {
                                    "events": {
                                        "signal": "brush_zoom_delta"
                                    },
                                    "update": "clampRange([brush_zoom_anchor.x + (brush_X[0] - brush_zoom_anchor.x) * brush_zoom_delta, brush_zoom_anchor.x + (brush_X[1] - brush_zoom_anchor.x) * brush_zoom_delta], invert(\"x\", 0), invert(\"x\", unit.width))"
                                }
                            ]
                        },
                        {
                            "name": "brush_size",
                            "value": [],
                            "on": [
                                {
                                    "events": {
                                        "source": "scope",
                                        "type": "mousedown",
                                        "filter": [
                                            "event.shiftKey",
                                            "!event.item || (event.item && event.item.mark.name !== \"brush_brush\")",
                                            "!event.item || (event.item && event.item.mark.name !== \"brush_brush\")"
                                        ]
                                    },
                                    "update": "{x: x(unit), y: y(unit), width: 0, height: 0}"
                                },
                                {
                                    "events": {
                                        "source": "scope",
                                        "type": "mousemove",
                                        "between": [
                                            {
                                                "source": "scope",
                                                "type": "mousedown",
                                                "filter": [
                                                    "event.shiftKey",
                                                    "!event.item || (event.item && event.item.mark.name !== \"brush_brush\")",
                                                    "!event.item || (event.item && event.item.mark.name !== \"brush_brush\")"
                                                ]
                                            },
                                            {
                                                "source": "scope",
                                                "type": "mouseup"
                                            }
                                        ]
                                    },
                                    "update": "{x: brush_size.x, y: brush_size.y, width: abs(x(unit) - brush_size.x), height: abs(y(unit) - brush_size.y)}"
                                },
                                {
                                    "events": {
                                        "signal": "brush_zoom_delta"
                                    },
                                    "update": "{x: brush_size.x, y: brush_size.y, width: brush_size.width * brush_zoom_delta , height: brush_size.height * brush_zoom_delta}"
                                }
                            ]
                        },
                        {
                            "name": "brush",
                            "update": "[{encoding: \"x\", field: \"X\", extent: brush_X}]"
                        },
                        {
                            "name": "brush_translate_anchor",
                            "value": {},
                            "on": [
                                {
                                    "events": [
                                        {
                                            "source": "scope",
                                            "type": "mousedown",
                                            "filter": [
                                                "event.shiftKey"
                                            ],
                                            "markname": "brush_brush"
                                        }
                                    ],
                                    "update": "{x: x(unit), y: y(unit), width: brush_size.width, height: brush_size.height, extent_x: slice(brush_X), }"
                                }
                            ]
                        },
                        {
                            "name": "brush_translate_delta",
                            "value": {},
                            "on": [
                                {
                                    "events": [
                                        {
                                            "source": "scope",
                                            "type": "mousemove",
                                            "between": [
                                                {
                                                    "source": "scope",
                                                    "type": "mousedown",
                                                    "filter": [
                                                        "event.shiftKey"
                                                    ],
                                                    "markname": "brush_brush"
                                                },
                                                {
                                                    "source": "scope",
                                                    "type": "mouseup"
                                                }
                                            ]
                                        }
                                    ],
                                    "update": "{x: x(unit) - brush_translate_anchor.x, y: y(unit) - brush_translate_anchor.y}"
                                }
                            ]
                        },
                        {
                            "name": "brush_zoom_anchor",
                            "on": [
                                {
                                    "events": [
                                        {
                                            "source": "scope",
                                            "type": "wheel",
                                            "markname": "brush_brush"
                                        }
                                    ],
                                    "update": "{x: invert(\"x\", x(unit)), y: invert(\"y\", y(unit))}"
                                }
                            ]
                        },
                        {
                            "name": "brush_zoom_delta",
                            "on": [
                                {
                                    "events": [
                                        {
                                            "source": "scope",
                                            "type": "wheel",
                                            "markname": "brush_brush"
                                        }
                                    ],
                                    "force": true,
                                    "update": "pow(1.001, event.deltaY * pow(16, event.deltaMode))"
                                }
                            ]
                        },
                        {
                            "name": "brush_tuple",
                            "on": [
                                {
                                    "events": {
                                        "signal": "brush"
                                    },
                                    "update": "{unit: unit.datum && unit.datum._id, intervals: brush}"
                                }
                            ]
                        },
                        {
                            "name": "brush_modify",
                            "on": [
                                {
                                    "events": {
                                        "signal": "brush"
                                    },
                                    "update": "modify(\"brush_store\", brush_tuple, {unit: brush_tuple.unit})"
                                }
                            ]
                        },
                        {
                            "name": "grid_X",
                            "on": [
                                {
                                    "events": {
                                        "signal": "grid_translate_delta"
                                    },
                                    "update": "[grid_translate_anchor.extent_x[0] - abs(span(grid_translate_anchor.extent_x)) * grid_translate_delta.x / grid_translate_anchor.width, grid_translate_anchor.extent_x[1] - abs(span(grid_translate_anchor.extent_x)) * grid_translate_delta.x / grid_translate_anchor.width]"
                                },
                                {
                                    "events": {
                                        "signal": "grid_zoom_delta"
                                    },
                                    "update": "[grid_zoom_anchor.x + (domain(\"x\")[0] - grid_zoom_anchor.x) * grid_zoom_delta, grid_zoom_anchor.x + (domain(\"x\")[1] - grid_zoom_anchor.x) * grid_zoom_delta]"
                                }
                            ],
                            "push": "outer"
                        },
                        {
                            "name": "grid_Y",
                            "on": [
                                {
                                    "events": {
                                        "signal": "grid_translate_delta"
                                    },
                                    "update": "[grid_translate_anchor.extent_y[0] + abs(span(grid_translate_anchor.extent_y)) * grid_translate_delta.y / grid_translate_anchor.height, grid_translate_anchor.extent_y[1] + abs(span(grid_translate_anchor.extent_y)) * grid_translate_delta.y / grid_translate_anchor.height]"
                                },
                                {
                                    "events": {
                                        "signal": "grid_zoom_delta"
                                    },
                                    "update": "[grid_zoom_anchor.y + (domain(\"y\")[0] - grid_zoom_anchor.y) * grid_zoom_delta, grid_zoom_anchor.y + (domain(\"y\")[1] - grid_zoom_anchor.y) * grid_zoom_delta]"
                                }
                            ],
                            "push": "outer"
                        },
                        {
                            "name": "grid",
                            "update": "[{encoding: \"x\", field: \"X\", extent: grid_X}, {encoding: \"y\", field: \"Y\", extent: grid_Y}]"
                        },
                        {
                            "name": "grid_translate_anchor",
                            "value": {},
                            "on": [
                                {
                                    "events": [
                                        {
                                            "source": "scope",
                                            "type": "mousedown",
                                            "filter": [
                                                "!event.shiftKey"
                                            ]
                                        }
                                    ],
                                    "update": "{x: x(unit), y: y(unit), width: unit.width, height: unit.height, extent_x: domain(\"x\"), extent_y: domain(\"y\"), }"
                                }
                            ]
                        },
                        {
                            "name": "grid_translate_delta",
                            "value": {},
                            "on": [
                                {
                                    "events": [
                                        {
                                            "source": "scope",
                                            "type": "mousemove",
                                            "between": [
                                                {
                                                    "source": "scope",
                                                    "type": "mousedown",
                                                    "filter": [
                                                        "!event.shiftKey"
                                                    ]
                                                },
                                                {
                                                    "source": "scope",
                                                    "type": "mouseup"
                                                }
                                            ]
                                        }
                                    ],
                                    "update": "{x: x(unit) - grid_translate_anchor.x, y: y(unit) - grid_translate_anchor.y}"
                                }
                            ]
                        },
                        {
                            "name": "grid_zoom_anchor",
                            "on": [
                                {
                                    "events": [
                                        {
                                            "source": "scope",
                                            "type": "wheel"
                                        }
                                    ],
                                    "update": "{x: invert(\"x\", x(unit)), y: invert(\"y\", y(unit))}"
                                }
                            ]
                        },
                        {
                            "name": "grid_zoom_delta",
                            "on": [
                                {
                                    "events": [
                                        {
                                            "source": "scope",
                                            "type": "wheel"
                                        }
                                    ],
                                    "force": true,
                                    "update": "pow(1.001, event.deltaY * pow(16, event.deltaMode))"
                                }
                            ]
                        },
                        {
                            "name": "grid_tuple",
                            "on": [
                                {
                                    "events": {
                                        "signal": "grid"
                                    },
                                    "update": "{unit: unit.datum && unit.datum._id, intervals: grid}"
                                }
                            ]
                        },
                        {
                            "name": "grid_modify",
                            "on": [
                                {
                                    "events": {
                                        "signal": "grid"
                                    },
                                    "update": "modify(\"grid_store\", grid_tuple, true)"
                                }
                            ]
                        },
                        {
                            "name": "xenc",
                            "update": "{fields: [\"X\"], values: [xenc_X]}"
                        },
                        {
                            "name": "xenc_tuple",
                            "on": [
                                {
                                    "events": {
                                        "signal": "xenc"
                                    },
                                    "update": "{unit: unit.datum && unit.datum._id, encodings: xenc.encodings, fields: xenc.fields, values: xenc.values, X: xenc.values[0]}"
                                }
                            ]
                        },
                        {
                            "name": "xenc_modify",
                            "on": [
                                {
                                    "events": {
                                        "signal": "xenc"
                                    },
                                    "update": "modify(\"xenc_store\", xenc_tuple, true)"
                                }
                            ]
                        }
                    ],
                    "marks": [
                        {
                            "type": "rect",
                            "encode": {
                                "enter": {
                                    "fill": {
                                        "value": "#333"
                                    },
                                    "fillOpacity": {
                                        "value": 0.125
                                    }
                                },
                                "update": {
                                    "x": {
                                        "scale": "x",
                                        "signal": "brush[0].extent[0]"
                                    },
                                    "x2": {
                                        "scale": "x",
                                        "signal": "brush[0].extent[1]"
                                    },
                                    "y": {
                                        "value": 0
                                    },
                                    "y2": {
                                        "field": {
                                            "group": "height"
                                        }
                                    }
                                }
                            },
                            "clip": true
                        },
                        {
                            "name": "child_marks",
                            "type": "symbol",
                            "role": "circle",
                            "from": {
                                "data": "facet"
                            },
                            "encode": {
                                "update": {
                                    "x": {
                                        "scale": "x",
                                        "field": "X"
                                    },
                                    "y": {
                                        "scale": "y",
                                        "field": "Y"
                                    },
                                    "fill": [
                                        {
                                            "test": "vlPoint(\"xenc_store\", parent._id, datum, \"union\", \"all\")",
                                            "value": "red"
                                        },
                                        {
                                            "value": "steelblue"
                                        }
                                    ],
                                    "size": [
                                        {
                                            "test": "vlInterval(\"brush_store\", parent._id, datum, \"intersect\", \"all\")",
                                            "value": 250
                                        },
                                        {
                                            "value": 100
                                        }
                                    ],
                                    "shape": {
                                        "value": "circle"
                                    }
                                }
                            },
                            "clip": true
                        },
                        {
                            "name": "child_voronoi",
                            "type": "path",
                            "from": {
                                "data": "child_marks"
                            },
                            "encode": {
                                "enter": {
                                    "fill": {
                                        "value": "transparent"
                                    },
                                    "strokeWidth": {
                                        "value": 0.35
                                    },
                                    "stroke": {
                                        "value": "transparent"
                                    },
                                    "isVoronoi": {
                                        "value": true
                                    }
                                }
                            },
                            "transform": [
                                {
                                    "type": "voronoi",
                                    "x": "datum.x",
                                    "y": "datum.y",
                                    "size": [
                                        {
                                            "signal": "child_width"
                                        },
                                        {
                                            "signal": "child_height"
                                        }
                                    ]
                                }
                            ],
                            "clip": true
                        },
                        {
                            "name": "brush_brush",
                            "type": "rect",
                            "encode": {
                                "enter": {
                                    "fill": {
                                        "value": "transparent"
                                    },
                                    "stroke": {
                                        "value": "white"
                                    }
                                },
                                "update": {
                                    "x": {
                                        "scale": "x",
                                        "signal": "brush[0].extent[0]"
                                    },
                                    "x2": {
                                        "scale": "x",
                                        "signal": "brush[0].extent[1]"
                                    },
                                    "y": {
                                        "value": 0
                                    },
                                    "y2": {
                                        "field": {
                                            "group": "height"
                                        }
                                    }
                                }
                            },
                            "clip": true
                        }
                    ],
                    "axes": [
                        {
                            "scale": "x",
                            "domain": false,
                            "format": "s",
                            "grid": true,
                            "labels": false,
                            "orient": "bottom",
                            "tickCount": 5,
                            "ticks": false,
                            "zindex": 0,
                            "gridScale": "y"
                        },
                        {
                            "scale": "y",
                            "domain": false,
                            "format": "s",
                            "grid": true,
                            "labels": false,
                            "orient": "left",
                            "ticks": false,
                            "zindex": 0,
                            "gridScale": "x"
                        }
                    ]
                }
            ]
        }
    ],
    "scales": [
        {
            "name": "x",
            "type": "linear",
            "domain": {
                "data": "source_0",
                "field": "X"
            },
            "range": [
                0,
                200
            ],
            "round": true,
            "nice": true,
            "zero": false,
            "domainRaw": {
                "signal": "grid_X"
            }
        },
        {
            "name": "y",
            "type": "linear",
            "domain": {
                "data": "source_0",
                "field": "Y"
            },
            "range": [
                200,
                0
            ],
            "round": true,
            "nice": true,
            "zero": false,
            "domainRaw": {
                "signal": "grid_Y"
            }
        }
    ]
}