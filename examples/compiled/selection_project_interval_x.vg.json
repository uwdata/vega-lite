{
  "$schema": "https://vega.github.io/schema/vega/v5.json",
  "autosize": "pad",
  "padding": 5,
  "style": "cell",
  "data": [
    {"name": "pts_store"},
    {
      "name": "source_0",
      "url": "data/cars.json",
      "format": {"type": "json"},
      "transform": [
        {
          "type": "aggregate",
          "groupby": ["Origin", "Cylinders"],
          "ops": ["count"],
          "fields": [null],
          "as": ["__count"]
        }
      ]
    }
  ],
  "signals": [
    {"name": "x_step", "value": 20},
    {"name": "width", "update": "bandspace(domain('x').length, 0, 0) * x_step"},
    {"name": "y_step", "value": 20},
    {
      "name": "height",
      "update": "bandspace(domain('y').length, 0, 0) * y_step"
    },
    {
      "name": "unit",
      "value": {},
      "on": [
        {"events": "mousemove", "update": "isTuple(group()) ? group() : unit"}
      ]
    },
    {"name": "pts", "update": "vlSelectionResolve(\"pts_store\")"},
    {
      "name": "pts_x",
      "value": [],
      "on": [
        {
          "events": {
            "source": "scope",
            "type": "mousedown",
            "filter": ["!event.item || event.item.mark.name !== \"pts_brush\""]
          },
          "update": "[x(unit), x(unit)]"
        },
        {
          "events": {
            "source": "window",
            "type": "mousemove",
            "consume": true,
            "between": [
              {
                "source": "scope",
                "type": "mousedown",
                "filter": [
                  "!event.item || event.item.mark.name !== \"pts_brush\""
                ]
              },
              {"source": "window", "type": "mouseup"}
            ]
          },
          "update": "[pts_x[0], clamp(x(unit), 0, width)]"
        },
        {"events": {"signal": "pts_scale_trigger"}, "update": "[0, 0]"},
        {
          "events": {"signal": "pts_translate_delta"},
          "update": "clampRange(panLinear(pts_translate_anchor.extent_x, pts_translate_delta.x / span(pts_translate_anchor.extent_x)), 0, width)"
        },
        {
          "events": {"signal": "pts_zoom_delta"},
          "update": "clampRange(zoomLinear(pts_x, pts_zoom_anchor.x, pts_zoom_delta), 0, width)"
        }
      ]
    },
    {
      "name": "pts_Cylinders",
      "on": [
        {
          "events": {"signal": "pts_x"},
          "update": "pts_x[0] === pts_x[1] ? null : invert(\"x\", pts_x)"
        }
      ]
    },
    {
      "name": "pts_scale_trigger",
      "update": "(!isArray(pts_Cylinders) || (invert(\"x\", pts_x)[0] === pts_Cylinders[0] && invert(\"x\", pts_x)[1] === pts_Cylinders[1])) ? pts_scale_trigger : {}"
    },
    {
      "name": "pts_tuple",
      "on": [
        {
          "events": [{"signal": "pts_Cylinders"}],
          "update": "pts_Cylinders ? {unit: \"\", fields: pts_tuple_fields, values: [pts_Cylinders]} : null"
        }
      ]
    },
    {
      "name": "pts_tuple_fields",
      "value": [{"field": "Cylinders", "channel": "x", "type": "E"}]
    },
    {
      "name": "pts_translate_anchor",
      "value": {},
      "on": [
        {
          "events": [
            {"source": "scope", "type": "mousedown", "markname": "pts_brush"}
          ],
          "update": "{x: x(unit), y: y(unit), extent_x: slice(pts_x)}"
        }
      ]
    },
    {
      "name": "pts_translate_delta",
      "value": {},
      "on": [
        {
          "events": [
            {
              "source": "window",
              "type": "mousemove",
              "consume": true,
              "between": [
                {
                  "source": "scope",
                  "type": "mousedown",
                  "markname": "pts_brush"
                },
                {"source": "window", "type": "mouseup"}
              ]
            }
          ],
          "update": "{x: pts_translate_anchor.x - x(unit), y: pts_translate_anchor.y - y(unit)}"
        }
      ]
    },
    {
      "name": "pts_zoom_anchor",
      "on": [
        {
          "events": [
            {
              "source": "scope",
              "type": "wheel",
              "consume": true,
              "markname": "pts_brush"
            }
          ],
          "update": "{x: x(unit), y: y(unit)}"
        }
      ]
    },
    {
      "name": "pts_zoom_delta",
      "on": [
        {
          "events": [
            {
              "source": "scope",
              "type": "wheel",
              "consume": true,
              "markname": "pts_brush"
            }
          ],
          "force": true,
          "update": "pow(1.001, event.deltaY * pow(16, event.deltaMode))"
        }
      ]
    },
    {"name": "pts_modify", "update": "modify(\"pts_store\", pts_tuple, true)"}
  ],
  "marks": [
    {
      "name": "pts_brush_bg",
      "type": "rect",
      "clip": true,
      "encode": {
        "enter": {"fill": {"value": "#333"}, "fillOpacity": {"value": 0.125}},
        "update": {
          "x": [
            {
              "test": "data(\"pts_store\").length && data(\"pts_store\")[0].unit === \"\"",
              "signal": "pts_x[0]"
            },
            {"value": 0}
          ],
          "y": [
            {
              "test": "data(\"pts_store\").length && data(\"pts_store\")[0].unit === \"\"",
              "value": 0
            },
            {"value": 0}
          ],
          "x2": [
            {
              "test": "data(\"pts_store\").length && data(\"pts_store\")[0].unit === \"\"",
              "signal": "pts_x[1]"
            },
            {"value": 0}
          ],
          "y2": [
            {
              "test": "data(\"pts_store\").length && data(\"pts_store\")[0].unit === \"\"",
              "field": {"group": "height"}
            },
            {"value": 0}
          ]
        }
      }
    },
    {
      "name": "marks",
      "type": "rect",
      "style": ["rect"],
      "from": {"data": "source_0"},
      "encode": {
        "update": {
          "fill": [
            {
              "test": "datum[\"__count\"] === null || isNaN(datum[\"__count\"])",
              "value": null
            },
            {
              "test": "!(length(data(\"pts_store\"))) || (vlSelectionTest(\"pts_store\", datum))",
              "scale": "color",
              "field": "__count"
            },
            {"value": "grey"}
          ],
          "tooltip": {
            "signal": "{\"Origin\": ''+datum[\"Origin\"], \"Cylinders\": ''+datum[\"Cylinders\"], \"Count of Records\": format(datum[\"__count\"], \"\")}"
          },
          "x": {"scale": "x", "field": "Cylinders"},
          "width": {"scale": "x", "band": true},
          "y": {"scale": "y", "field": "Origin"},
          "height": {"scale": "y", "band": true}
        }
      }
    },
    {
      "name": "pts_brush",
      "type": "rect",
      "clip": true,
      "encode": {
        "enter": {"fill": {"value": "transparent"}},
        "update": {
          "x": [
            {
              "test": "data(\"pts_store\").length && data(\"pts_store\")[0].unit === \"\"",
              "signal": "pts_x[0]"
            },
            {"value": 0}
          ],
          "y": [
            {
              "test": "data(\"pts_store\").length && data(\"pts_store\")[0].unit === \"\"",
              "value": 0
            },
            {"value": 0}
          ],
          "x2": [
            {
              "test": "data(\"pts_store\").length && data(\"pts_store\")[0].unit === \"\"",
              "signal": "pts_x[1]"
            },
            {"value": 0}
          ],
          "y2": [
            {
              "test": "data(\"pts_store\").length && data(\"pts_store\")[0].unit === \"\"",
              "field": {"group": "height"}
            },
            {"value": 0}
          ],
          "stroke": [
            {"test": "pts_x[0] !== pts_x[1]", "value": "white"},
            {"value": null}
          ]
        }
      }
    }
  ],
  "scales": [
    {
      "name": "x",
      "type": "band",
      "domain": {"data": "source_0", "field": "Cylinders", "sort": true},
      "range": {"step": {"signal": "x_step"}},
      "paddingInner": 0,
      "paddingOuter": 0
    },
    {
      "name": "y",
      "type": "band",
      "domain": {"data": "source_0", "field": "Origin", "sort": true},
      "range": {"step": {"signal": "y_step"}},
      "paddingInner": 0,
      "paddingOuter": 0
    },
    {
      "name": "color",
      "type": "linear",
      "domain": {"data": "source_0", "field": "__count"},
      "range": "heatmap",
      "interpolate": "hcl",
      "zero": false
    }
  ],
  "axes": [
    {
      "scale": "x",
      "orient": "bottom",
      "grid": false,
      "title": "Cylinders",
      "labelAlign": "right",
      "labelAngle": 270,
      "labelBaseline": "middle",
      "labelOverlap": true,
      "zindex": 1
    },
    {
      "scale": "y",
      "orient": "left",
      "grid": false,
      "title": "Origin",
      "labelOverlap": true,
      "zindex": 1
    }
  ],
  "legends": [
    {
      "fill": "color",
      "gradientLength": {"signal": "clamp(height, 64, 200)"},
      "title": "Count of Records"
    }
  ],
  "config": {"axisY": {"minExtent": 30}}
}
