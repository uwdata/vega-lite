name: Test

on:
  push:
    branches:
      - '**'

jobs:
  test-matrix:
    name: Node ${{ matrix.node }}
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node: [10, 12, 14]

    steps:
      - uses: actions/checkout@v2

      - name: Get yarn cache directory path
        id: yarn-cache-dir-path
        run: echo "::set-output name=dir::$(yarn cache dir)"

      - uses: actions/cache@v1
        id: yarn-cache # use this to check for `cache-hit` (`steps.yarn-cache.outputs.cache-hit != 'true'`)
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-

      - name: Setup Node
        uses: actions/setup-node@v1
        with:
          node-version: ${{ matrix.node }}

      # remove once https://github.com/Automattic/node-canvas/pull/1568 is in
      - name: Install extra dependencies for Node 14
        run: sudo apt-get install libcairo2-dev libpango1.0-dev libgif-dev
        if: matrix.node == 14

      - name: Install Node dependencies
        run: yarn --frozen-lockfile

      - name: Install extra dependencies for Puppeteer
        run: sudo apt-get install libgbm1

      - name: Tests
        run: yarn jest test/

      - name: Example tests
        run: yarn jest examples/

      - name: Build
        run: yarn build

  build-site:
    name: Build Site
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2

      - name: Get yarn cache directory path
        id: yarn-cache-dir-path
        run: echo "::set-output name=dir::$(yarn cache dir)"

      - uses: actions/cache@v1
        id: yarn-cache # use this to check for `cache-hit` (`steps.yarn-cache.outputs.cache-hit != 'true'`)
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-

      - name: Install Node dependencies
        run: yarn --frozen-lockfile

      - name: Build
        run: yarn build:site

  runtime-coverage:
    runs-on: ubuntu-latest

    name: Runtime and Coverage

    steps:
      - uses: actions/checkout@v2

      - name: Get yarn cache directory path
        id: yarn-cache-dir-path
        run: echo "::set-output name=dir::$(yarn cache dir)"

      - uses: actions/cache@v1
        id: yarn-cache # use this to check for `cache-hit` (`steps.yarn-cache.outputs.cache-hit != 'true'`)
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-

      - name: Install Node dependencies
        run: yarn --frozen-lockfile

      - name: Install extra dependencies for Puppeteer
        run: sudo apt-get install libgbm1

      - name: Build
        run: yarn build:only

      - name: Runtime tests
        run: yarn test:runtime

      - name: Test coverage
        run: yarn jest test/ --collectCoverage=true

      - name: Upload coverage to Codecov
        run: yarn codecov
        env:
          CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}

  test-cli:
    name: CLI
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]

    steps:
      - uses: actions/checkout@v2

      - name: Get yarn cache directory path
        id: yarn-cache-dir-path
        run: echo "::set-output name=dir::$(yarn cache dir)"

      - uses: actions/cache@v1
        id: yarn-cache # use this to check for `cache-hit` (`steps.yarn-cache.outputs.cache-hit != 'true'`)
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-

      - name: Install Node dependencies
        run: yarn --frozen-lockfile

      - name: Build
        run: yarn build:only

      - name: Compile Vega
        run: |
          bin/vl2vg examples/specs/bar.vl.json -p > bar.vg.json
          cat bar.vg.json

      - name: Diff compiled Vega
        run: diff bar.vg.json examples/compiled/bar.vg.json

      - name: Compile PNG, SVG, PDF
        run: |
          bin/vl2png examples/specs/bar.vl.json > bar.png
          bin/vl2svg examples/specs/bar.vl.json > bar.svg
          bin/vl2pdf examples/specs/bar.vl.json > bar.pdf

      - name: Compile from stdin (Unix)
        if: matrix.os != 'windows-latest'
        run: |
          bin/vl2vg -p < examples/specs/bar.vl.json > bar-stdin.vg.json
          bin/vl2png < examples/specs/bar.vl.json > bar-stdin.png
          bin/vl2svg < examples/specs/bar.vl.json > bar-stdin.svg
          bin/vl2pdf < examples/specs/bar.vl.json > bar-stdin.pdf
